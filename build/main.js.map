{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.4.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { SaliaHttpClient } from \"./salia-helper\";\nimport { ApiError } from \"./types/ApiError\";\nimport { DeviceInformation } from \"./types/DeviceInformation\";\nimport { ping } from \"@network-utils/tcp-ping\";\nimport { DeviceCPInformation } from \"./types/DeviceCPInformation\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\n\n\nclass EchargeCpu2 extends utils.Adapter {\n\n\tisOnlineCheckTimeout: any;\n\tisCPStateCheckTimeout: any;\n\n\tdeviceUrl!: URL;\n\tdevicePort!: number;\n\n\teChargeClient!: SaliaHttpClient;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"echarge_cpu2\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\tif (!this.config.basicDeviceUrl) {\n\t\t\tthis.log.error(`Device Url is empty - please check instance configuration of ${this.namespace}`);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.deviceUrl = new URL(this.config.basicDeviceUrl);\n\t\t\tthis.log.debug(`Device Url is - ${this.config.basicDeviceUrl}`);\n\n\t\t\tif (this.deviceUrl.port == \"\") {\n\t\t\t\tthis.devicePort = 443;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.devicePort = parseInt(this.deviceUrl.port);\n\t\t\t}\n\n\t\t\tthis.eChargeClient = new SaliaHttpClient(this.config.basicDeviceUrl);\n\n\t\t\tawait this.setStateAsync(\"info.connection\", false);\n\n\t\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\t\t// this.subscribeStates(\"testVariable\");\n\t\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t\t// this.subscribeStates(\"lights.*\");\n\t\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t\t// this.subscribeStates(\"*\");\n\n\t\t\tthis.subscribeStates(\"info.connection\");\n\t\t\tthis.subscribeStates(\"deviceSecc.scc_cp_state\");\n\n\t\t\t/*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n\t\t\t// the variable testVariable is set to true as command (ack=false)\n\t\t\t// await this.setStateAsync(\"testVariable\", true);\n\n\t\t\t// same thing, but the value is flagged \"ack\"\n\t\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\t\t// await this.setStateAsync(\"testVariable\", { val: true, ack: true });\n\n\t\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\t\t// await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n\n\t\t\t// Start online check\n\t\t\tthis.onlineCheck();\n\n\t\t\t// if (deviceInfoResponse.status == 200) {\n\t\t\t// \tawait this.setStateAsync(\"info.connection\", true, true);\n\n\t\t\t// \tthis.log.debug(\"deviceInfoResponse: \" + JSON.stringify(deviceInfoResponse.data));\n\n\t\t\t// \t// deviceInfoResponse: {\"product\":\"2310007\",\"modelname\":\"Salia PLCC Slave\",\"hardware_version\":\"1.0\",\"software_version\":\"1.84.50\",\"vcs_version\":\"V0R5e\",\"hostname\":\"salia\",\"mac_address\":\"00:01:87:13:bc:1e\",\"serial\":\"101293342\",\"uuid\":\"5491ad62-022a-4356-a32c-00018713bc1e\",\"internal_id\":\"998539\",\"ip_lo\":\"127.0.0.1\",\"ip_br0:fallback\":\"169.254.12.53\",\"ip_br0\":\"172.31.1.95\"}\n\t\t\t// }\n\t\t\t// else {\n\t\t\t// \tawait this.setStateAsync(\"info.connection\", false, true);\n\t\t\t// }\n\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`[onReady] error: ${error.message}, stack: ${error.stack}`);\n\t\t}\n\n\t\t// examples for the checkPassword/checkGroup functions\n\t\t// let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n\t\t// this.log.info(\"check user admin pw iobroker: \" + result);\n\n\t\t// result = await this.checkGroupAsync(\"admin\", \"admin\");\n\t\t// this.log.info(\"check group user admin group admin: \" + result);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\tif (state && !state.ack) {\n\t\t\tconst stateId = id.replace(this.namespace + \".\", \"\");\n\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${stateId} changed: ${state.val} (ack = ${state.ack})`);\n\n\t\t\tif (stateId === \"info.connection\") {\n\t\t\t\tthis.log.debug(`[onStateChange] ${stateId} state changed - get device infos again`);\n\n\t\t\t\tif (state.val) {\n\t\t\t\t\tawait this.getDeviceInformation();\n\n\t\t\t\t\tawait this.deviceCPInformationCheck();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (stateId === \"deviceSecc.scc_cp_state\") {\n\t\t\t\tthis.log.debug(`[onStateChange] ${stateId} state changed - get device infos again`);\n\t\t\t}\n\n\t\t\tawait this.setStateAsync(stateId, state.val, true);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === \"object\" && obj.message) {\n\t// \t\tif (obj.command === \"send\") {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info(\"send command\");\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate async onlineCheck(): Promise<void> {\n\t\tif (this.isOnlineCheckTimeout) {\n\t\t\tthis.clearTimeout(this.isOnlineCheckTimeout);\n\t\t\tthis.isOnlineCheckTimeout = null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst hostReachable = await ping({address:this.deviceUrl.hostname, port: this.devicePort, timeout: 500} );\n\n\t\t\tif (hostReachable.errors.length == 0) {\n\t\t\t\tawait this.setStateAsync(\"info.connection\", true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tawait this.setStateAsync(\"info.connection\", false);\n\t\t\t}\n\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`[onReady] error: ${error.message}, stack: ${error.stack}`);\n\t\t}\n\n\t\tthis.isOnlineCheckTimeout = this.setTimeout(() => {\n\t\t\tthis.isOnlineCheckTimeout = null;\n\t\t\tthis.onlineCheck();\n\t\t}, 60 * 1000); // Restart online check in 60 seconds\n\t}\n\n\tprivate async getDeviceInformation(): Promise<void> {\n\t\ttry {\n\t\t\tconst deviceInfoResponse = await this.eChargeClient.getDeviceInfos();\n\n\t\t\tif ((deviceInfoResponse as DeviceInformation) != null) {\n\n\t\t\t\tconst response = deviceInfoResponse as DeviceInformation;\n\t\t\t\tthis.log.debug(\"deviceInfoResponse: \" + response.hardware_version);\n\n\t\t\t\tawait this.setStateAsync(\"deviceInfo.hardware_version\", response.hardware_version, true);\n\t\t\t\tawait this.setStateAsync(\"deviceInfo.hostname\", response.hostname, true);\n\t\t\t\tawait this.setStateAsync(\"deviceInfo.internal_id\", response.internal_id, true);\n\t\t\t\tawait this.setStateAsync(\"deviceInfo.mac_address\", response.mac_address, true);\n\t\t\t\tawait this.setStateAsync(\"deviceInfo.product\", response.product, true);\n\t\t\t\tawait this.setStateAsync(\"deviceInfo.serial\", response.serial, true);\n\t\t\t\tawait this.setStateAsync(\"deviceInfo.software_version\", response.software_version, true);\n\t\t\t\tawait this.setStateAsync(\"deviceInfo.vcs_version\", response.vcs_version, true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst response = deviceInfoResponse as ApiError\n\n\t\t\t\tthis.log.error(response.message);\n\t\t\t}\n\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`[getDeviceInformation] error: ${error.message}, stack: ${error.stack}`);\n\t\t}\n\t}\n\n\tprivate async deviceCPInformationCheck(): Promise<void> {\n\t\tif (this.isCPStateCheckTimeout) {\n\t\t\tthis.clearTimeout(this.isCPStateCheckTimeout);\n\t\t\tthis.isCPStateCheckTimeout = null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst deviceInfoResponse = await this.eChargeClient.getDeviceCPInformation();\n\n\t\t\tif ((deviceInfoResponse as DeviceCPInformation) != null) {\n\n\t\t\t\tconst response = deviceInfoResponse as DeviceCPInformation;\n\t\t\t\tthis.log.debug(\"deviceInfoResponse: \" + response.state);\n\n\t\t\t\tawait this.setStateAsync(\"deviceSecc.scc_cp_state\", response.state);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst response = deviceInfoResponse as ApiError\n\n\t\t\t\t// await this.setStateAsync(\"deviceInfo.scc.cp.state\", false, true);\n\n\t\t\t\tthis.log.error(response.message);\n\t\t\t}\n\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`[deviceCPInformationCheck] error: ${error.message}, stack: ${error.stack}`);\n\t\t}\n\n\t\tthis.isCPStateCheckTimeout = this.setTimeout(() => {\n\t\t\tthis.isCPStateCheckTimeout = null;\n\t\t\tthis.deviceCPInformationCheck();\n\t\t}, 60 * 1000); // Restart online check in 60 seconds\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new EchargeCpu2(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new EchargeCpu2())();\n}"],
  "mappings": "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",
  "names": []
}
